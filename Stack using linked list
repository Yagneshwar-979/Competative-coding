#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void push(Node** top, int data) {
    Node* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
    printf("Pushed %d onto the stack.\n", data);
}

int pop(Node** top) {
    if (*top == NULL) {
        printf("Stack Underflow! Cannot pop from an empty stack.\n");
        return -1;
    }
    Node* temp = *top;
    int poppedData = temp->data;
    *top = temp->next;
    free(temp);
    return poppedData;
}

int peek(Node* top) {
    if (top == NULL) {
        printf("Stack is empty. Nothing to peek.\n");
        return -1;
    }
    return top->data;
}

int isEmpty(Node* top) {
    return top == NULL;
}

void displayStack(Node* top) {
    if (top == NULL) {
        printf("Stack is empty.\n");
        return;
    }
    while (top) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}

int main() {
    Node* stack = NULL;

    push(&stack, 30);
    push(&stack, 35);
    push(&stack, 40);

    displayStack(stack);
    printf("Top element is: %d\n", peek(stack));

    pop(&stack);
    displayStack(stack);

    pop(&stack);
    pop(&stack);
    pop(&stack);

    printf("Is stack empty? %s\n", isEmpty(stack) ? "Yes" : "No");

    return 0;
}
